1) Remember that read-only (immutable) objects are always thread-safe.
CopyOnWriteArrayList will never modify its internal array of data.
Any mutating operations on the List (add, set, remove, etc.) will cause a new
modified copy of the array to be created, which will replace the original readonly
array. The read-only nature of the underlying array in a
CopyOnWriteArrayList allows it to be safely shared with multiple threads


Any mutating methods called on a copy-onwriteâ€“
based Iterator or ListIterator (such as add, set, or remove) will
throw an UnsupportedOperationException.


NoConcurrentModificationException


    - CopyOnWriteArrayList
    - CopyOnWriteArraySet


2) Collections.synchronizedList(new ArrayList())


3) A thread-safe collection does not make the elements stored within
the collection thread-safe. Just because a collection that contains
elements is threadsafe does not mean the elements themselves can be
safely modified by multiple threads. You might have to use atomic
variables, locks, synchronized code blocks, or immutable (read-only)
objects to make the objects referenced by a collection thread-safe.


4) Concurrent collections:

The java.util.concurrent package also contains several concurrent
collections that can be concurrently read and modified by multiple threads,
but without the copy-on-write behavior seen in the copy-on-write collections.

ConcurrentHashMap
ConcurrentLinkedDeque
ConcurrentLinkedQueue
ConcurrentSkipListMap
ConcurrentSkipListSet

the ConcurrentMap interface. A ConcurrentMap enhances a Map by adding the
atomic putIfAbsent
    
if(!map.containsKey(key)){
    return map.put(key, value);
} else {
    return map.get(key);
}


This collections are equal to TreeMap and TreeSet
ConcurrentSkipListMap
ConcurrentSkipListSet



5) BlockingQueue:

ArrayBlockingQueue
LinkedBlockingDeque
LinkedBlockingQueue
PriorityBlockingQueue
DelayQueue
LinkedTransferQueue
SynchronousQueue


